schema {
  query: Query
  mutation: Mutation
}

input AuthCreateUserInput {
  email: String!
  firstName: String!
  lastName: String!
  password: String!
}

type AuthCreateUserPayload {
  tokens: Tokens!
  user: User!
}

input AuthLoginInput {
  email: String!
  password: String!
}

"""Login payload"""
type AuthLoginPayload {
  """Access to the refresh tokens"""
  tokens: Tokens!
  """The user that has been logged in"""
  user: User!
}

type Challenge implements Node & Timestamps {
  activity: ChallengeActivity!
  activityTopMovers(after: String, first: Int): ChallengeActivityResultConnection
  activityTopResults(after: String, first: Int): ChallengeActivityResultConnection
  cadence: ChallengeCadence
  community: Community
  createdAt: DateTime
  description: String
  endDate: DateTime
  id: ID!
  invitations: [ChallengeInvitation!]
  memberCount: Int
  members: [User!]
  memberships: [ChallengeMembership!]
  mode: ChallengeMode
  name: String!
  startDate: DateTime
  updatedAt: DateTime
}

type ChallengeActivity implements Node & Timestamps {
  challengeId: ID
  createdAt: DateTime
  goal: ChallengeActivityGoal!
  id: ID!
  target: Int
  type: ChallengeActivityType!
  unit: ChallengeActivityUnits!
  updatedAt: DateTime
}

input ChallengeActivityCreateInput {
  goal: ChallengeActivityGoal!
  target: Int
  type: ChallengeActivityType!
  unit: ChallengeActivityUnits!
}

enum ChallengeActivityGoal {
  HIGHEST_NUMBER
  LONGEST_DISTANCE
  LONGEST_TIME
  LOWEST_NUMBER
  MOST_IMPROVED
  SHORTEST_DISTANCE
  SHORTEST_TIME
  SPECIFIC_TARGET
}

"""
Results for a challenge activity are recorded per user per activity.
In the future we may want to support multiple activities per challenge.

There can be multiple results per activity per user.
"""
type ChallengeActivityResult implements Node & Timestamps {
  activity: ChallengeActivity!
  createdAt: DateTime
  id: ID!
  result: Float!
  updatedAt: DateTime
  user: User!
}

type ChallengeActivityResultConnection {
  edges: [ChallengeActivityResultEdge!]
  pageInfo: PageInfo!
}

input ChallengeActivityResultCreateInput {
  activityId: ID!
  challengeId: ID!
  result: Float!
  userId: ID!
}

type ChallengeActivityResultEdge {
  cursor: String!
  node: ChallengeActivityResult!
}

"""
Top movers are the users with the largest relative
movement for a given activity.
"""
type ChallengeActivityTopMover implements Node & Timestamps {
  activity: ChallengeActivity!
  createdAt: DateTime
  id: ID!
  """A percentage - not a float"""
  result: Int!
  updatedAt: DateTime
  user: User!
}

type ChallengeActivityTopMoverConnection {
  edges: [ChallengeActivityTopMoverEdge!]
  pageInfo: PageInfo!
}

type ChallengeActivityTopMoverEdge {
  cursor: String!
  node: ChallengeActivityTopMover!
}

enum ChallengeActivityType {
  DISTANCE
  REPETITIONS
  SOCIAL
  TIME_BASED
  WEIGHTLIFTING
}

enum ChallengeActivityUnits {
  FEET
  HOURS
  KILOGRAMS
  KILOMETRES
  METRES
  MILES
  MINUTES
  NONE
  PERCENT
  POUNDS
  SECONDS
}

enum ChallengeCadence {
  BIWEEKLY
  DAILY
  MONTHLY
  NONE
  WEEKLY
  YEARLY
}

type ChallengeConnection {
  edges: [ChallengeEdge!]
  pageInfo: PageInfo!
}

input ChallengeCreateInput {
  cadence: ChallengeCadence!
  communityId: ID!
  description: String!
  endDate: DateTime!
  mode: ChallengeMode!
  name: String!
  startDate: DateTime!
}

type ChallengeCreatePayload {
  challengeEdge: ChallengeEdge!
}

type ChallengeEdge {
  cursor: String!
  node: Challenge!
}

type ChallengeInvitation implements Node & Timestamps {
  challenge: Challenge!
  createdAt: DateTime
  expiresAt: DateTime!
  id: ID!
  invitee: User!
  inviter: User!
  status: InvitationStatus!
  updatedAt: DateTime
}

type ChallengeMembership implements Node {
  challenge: Challenge!
  community: Community!
  id: ID!
  joinedAt: DateTime!
  user: User!
}

enum ChallengeMode {
  BLIND_TRUST
  BUDDY_SYSTEM
  VERIFIED_ONLY
}

input ChallengeUpdateInput {
  description: String
  endDate: DateTime
  id: ID!
  name: String
  startDate: DateTime
}

type Community implements Node & Timestamps {
  challenges(after: String, first: Int): ChallengeConnection
  createdAt: DateTime
  id: ID!
  invitations(after: String, first: Int): CommunityInvitationConnection
  isPublic: Boolean
  isVerified: Boolean
  memberCount: Int
  members: UserConnection
  memberships: [CommunityMembership!]
  name: String!
  owner: User
  updatedAt: DateTime
  users: [User!]
}

type CommunityConnection {
  edges: [CommunityEdge!]
  pageInfo: PageInfo!
}

input CommunityCreateInput {
  isPublic: Boolean!
  name: String!
}

type CommunityCreatePayload {
  communityEdge: CommunityEdge!
}

type CommunityEdge {
  cursor: String!
  node: Community!
}

type CommunityInvitation implements Node & Timestamps {
  community: Community!
  createdAt: DateTime!
  expiresAt: DateTime!
  id: ID!
  invitee: User!
  inviter: User!
  status: InvitationStatus!
  updatedAt: DateTime
}

type CommunityInvitationConnection {
  edges: [CommunityInvitationEdge!]
  pageInfo: PageInfo!
}

type CommunityInvitationEdge {
  cursor: String!
  node: CommunityInvitation!
}

type CommunityInviteDeclinePayload {
  invitationId: ID!
}

type CommunityJoinPayload {
  communityEdge: CommunityEdge!
  invitationId: ID!
}

type CommunityMembership implements Node {
  community: Community!
  id: ID!
  isAdmin: Boolean!
  joinedAt: DateTime!
  user: User!
}

input CommunityUpdateInput {
  id: ID!
  isPublic: Boolean
  name: String
}

type CreateChallengeActivityResultPayload {
  challengeActivityResultEdge: ChallengeActivityResultEdge!
}

"""Date custom scalar type"""
scalar DateTime

type HomeFeedConnection {
  edges: [HomeFeedEdge!]!
  pageInfo: PageInfo!
}

type HomeFeedEdge {
  cursor: String!
  node: HomeFeedItem!
}

union HomeFeedItem = Challenge | UserRecord

enum InvitationStatus {
  ACCEPTED
  DECLINED
  PENDING
}

type Mutation {
  """Create a new user"""
  authCreateUser(authCreateUserInput: AuthCreateUserInput!): AuthCreateUserPayload!
  """Login to the application"""
  authLogin(authLoginInput: AuthLoginInput!): AuthLoginPayload!
  """Logout from the application"""
  authLogout: Boolean!
  """Refresh the access and refresh tokens"""
  authRefreshTokens: Tokens!
  challengeActivityResultCreate(challengeActivityResultCreateInput: ChallengeActivityResultCreateInput!): CreateChallengeActivityResultPayload!
  challengeCreate(challengeActivityCreateInput: ChallengeActivityCreateInput!, challengeCreateInput: ChallengeCreateInput!): ChallengeCreatePayload!
  challengeDelete(id: ID!): Boolean!
  challengeInvite(challengeId: ID!, userId: ID!): Boolean!
  challengeJoin(inviteId: ID!): Challenge!
  challengeLeave(id: ID!): Boolean!
  challengeUpdate(challengeUpdateInput: ChallengeUpdateInput!): Challenge!
  communityCreate(communityCreateInput: CommunityCreateInput!): CommunityCreatePayload!
  communityDelete(id: ID!): Boolean!
  communityInvite(communityId: ID!, userId: ID!): Boolean!
  communityInviteDecline(inviteId: ID!): CommunityInviteDeclinePayload!
  communityJoin(inviteId: ID!): CommunityJoinPayload!
  communityLeave(id: ID!): Boolean!
  communityUpdate(communityUpdateInput: CommunityUpdateInput!): Community!
  createUserRecord(input: UserRecordCreateInput!): UserRecord!
  updateUserStreak(input: UserStreakUpdateInput!): UserStreak!
  """Accept a friendship"""
  userAcceptFriendship(friendId: ID!): UserFriendship!
  """Decline a friendship"""
  userDeclineFriendship(friendId: ID!): UserFriendship!
  """Remove a friendship"""
  userRemoveFriendship(friendId: ID!): UserFriendship!
  """Request a friendship"""
  userRequestFriendship(friendId: ID!): UserFriendship!
  """Update a user"""
  userUpdate(userUpdateInput: UserUpdateInput!): User!
}

interface Node {
  id: ID!
}

"""
GraphQL Spec pagination information
https://relay.dev/graphql/connections.htm#sec-Connection-Types.Fields.PageInfo
"""
type PageInfo {
  """Last node of the edges"""
  endCursor: String
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  """First node of the edges"""
  startCursor: String
}

type Query {
  challenge(id: ID!): Challenge
  challengeActivityResults(after: String, challengeId: ID!, first: Int): ChallengeActivityResultConnection!
  challengeActivityTopMovers(after: String, challengeId: ID!, first: Int): ChallengeActivityResultConnection!
  challengeActivityTopResults(after: String, challengeId: ID!, first: Int): ChallengeActivityResultConnection!
  challengeInvitations(userId: ID!): [ChallengeInvitation!]
  """Is the current user friends with this user?"""
  getFriendshipStatus(friendId: ID!, userId: ID!): UserFriendshipStatus
  health: String!
  node(id: ID!): Node
  """Fetch the user profile of any user by ID"""
  userProfile(id: ID!): User
  """Search for users by name"""
  userSearch(searchTerm: String): [User!]
  """Validate if an email is already taken"""
  userValidateEmail(email: String!): ValidEmailResponse!
  """All users"""
  users: [User!]
  viewer: Viewer
}

interface Timestamps {
  createdAt: DateTime
  updatedAt: DateTime
}

"""Tokens are the access and refresh tokens for the user"""
type Tokens {
  """Access tokens expire more frequently for stronger security measures"""
  accessToken: String!
  """Refresh token is stored safely for user to refresh access token"""
  refreshToken: String!
}

"""A user of the app"""
type User implements Node & Timestamps {
  avatarUrl: String
  bio: String
  buddyCount: Int
  challengeActivityResultsCount: Int
  createdAt: DateTime
  email: String
  firstName: String
  """Requests to be followed by this user"""
  followRequests(after: String, first: Int): UserFriendshipConnection
  followerCount: Int
  """Requests to follow this user"""
  followerRequests(after: String, first: Int): UserFriendshipConnection
  """If they have any followers..."""
  followers: UserConnection
  """If they follow any users..."""
  following: UserConnection
  followingCount: Int
  handle: String
  id: ID!
  lastName: String
  password: String
  refreshToken: String
  searchFriends(searchTerm: String): [User!]
  """
  The streak of consecutive days that the user has completed a challenge.
  """
  streak: UserStreak
  updatedAt: DateTime
}

type UserConnection {
  edges: [UserEdge!]
  pageInfo: PageInfo!
}

type UserEdge {
  cursor: String!
  node: User!
}

type UserFriendship implements Node & Timestamps {
  createdAt: DateTime
  friend: User!
  id: ID!
  status: InvitationStatus!
  updatedAt: DateTime
  user: User!
}

type UserFriendshipConnection {
  edges: [UserFriendshipEdge!]!
  pageInfo: PageInfo!
}

type UserFriendshipEdge {
  cursor: String!
  node: UserFriendship!
}

"""
Represents the bidirectional friendship status between two users.
When building social graphs, it's important to track both directions
of a relationship since friendships can be asymmetric (e.g. pending requests).
"""
type UserFriendshipStatus {
  """
  Whether these users are mutual friends (both have accepted the friendship).
  True only if both outgoing and incoming friendships exist and are ACCEPTED.
  """
  areMutualFriends: Boolean!
  """
  The incoming friendship status from the target user to the viewer.
  Will be null if no friendship request exists in this direction.
  """
  incoming: UserFriendship
  """
  The outgoing friendship status from the viewer to the target user.
  Will be null if no friendship request exists in this direction.
  """
  outgoing: UserFriendship
}

"""
Represents a record of a user's activity in a specific challenge.
This tracks individual challenge activity results for the user.
"""
type UserRecord implements Node & Timestamps {
  """The result of the activity"""
  activityResult: ChallengeActivityResult!
  """The challenge this record is associated with"""
  challenge: Challenge!
  createdAt: DateTime
  id: ID!
  updatedAt: DateTime
  user: User!
}

input UserRecordCreateInput {
  activityId: ID!
  activityResultId: ID!
  challengeId: ID!
  userId: ID!
}

"""
Represents the streak of consecutive days that a user has completed a challenge.
It can be any challenge from any community.
"""
type UserStreak implements Node & Timestamps {
  createdAt: DateTime
  """
  The current streak of consecutive days that the user has completed a challenge
  """
  currentStreak: Int!
  id: ID!
  """
  The longest streak of consecutive days that the user has completed a challenge
  """
  longestStreak: Int
  updatedAt: DateTime
  user: User
}

input UserStreakUpdateInput {
  currentStreak: Int!
  id: ID!
  longestStreak: Int!
}

input UserUpdateInput {
  bio: String
  email: String
  firstName: String
  handle: String
  id: ID!
  lastName: String
}

type ValidEmailResponse {
  alreadyTaken: Boolean!
}

"""The currently logged in user"""
type Viewer implements Node {
  challenge(challengeId: ID!): Challenge
  challenges(after: String, communityId: ID!, first: Int!): ChallengeConnection!
  communities(after: String, first: Int!): CommunityConnection!
  community(communityId: ID!): Community
  communityInvitations(after: String, first: Int!): CommunityInvitationConnection!
  homeFeed(after: String, first: Int!): HomeFeedConnection!
  """Alias for user id"""
  id: ID!
  """Only one active user can be logged in at a time"""
  user: User
}