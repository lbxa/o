type Community implements Node & Timestamps {
  id: ID!
  name: String!
  isPublic: Boolean
  isVerified: Boolean
  users: [User]
  createdAt: DateTime
  updatedAt: DateTime

  # TODO
  members: [User!]
  challenges(first: Int, after: String): ChallengeConnection
  memberships: [CommunityMembership!]
  invitations(first: Int, after: String): CommunityInvitationConnection
}

type CommunityMembership implements Node {
  id: ID!
  user: User!
  community: Community!
  isAdmin: Boolean!
  joinedAt: DateTime!
}

type CommunityInvitation implements Node & Timestamps {
  id: ID!
  community: Community!
  inviter: User!
  invitee: User!
  status: InvitationStatus!
  createdAt: DateTime!
  updatedAt: DateTime
  expiresAt: DateTime!
}

input CommunityCreateInput {
  name: String!
  isPublic: Boolean!
}

input CommunityUpdateInput {
  id: ID!
  name: String
}

type CommunityEdge {
  cursor: String!
  node: Community!
}

type CommunityConnection {
  edges: [CommunityEdge!]
  pageInfo: PageInfo!
}

type CommunityInvitationEdge {
  cursor: String!
  node: CommunityInvitation!
}

type CommunityInvitationConnection {
  edges: [CommunityInvitationEdge!]
  pageInfo: PageInfo!
}

type CommunityCreatePayload {
  communityEdge: CommunityEdge!
}

type CommunityJoinPayload {
  invitationId: ID!
  communityEdge: CommunityEdge!
}

type CommunityInviteDeclinePayload {
  invitationId: ID!
}

type Mutation {
  communityCreate(communityCreateInput: CommunityCreateInput!): CommunityCreatePayload!
  communityUpdate(communityUpdateInput: CommunityUpdateInput!): Community!
  communityDelete(id: ID!): Boolean! 
  communityInvite(userId: ID!, communityId: ID!): Boolean!
  communityInviteDecline(inviteId: ID!): CommunityInviteDeclinePayload!
  communityJoin(inviteId: ID!): CommunityJoinPayload!
  communityLeave(id: ID!): Boolean!
}