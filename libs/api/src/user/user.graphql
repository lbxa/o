"""
A user of the app
"""
type User implements Node & Timestamps {
  id: ID!
  handle: String
  firstName: String
  lastName: String
  bio: String
  email: String
  password: String
  createdAt: DateTime
  updatedAt: DateTime
  friendRequests(first: Int, after: String): UserFriendshipConnection
  "If they have any..."
  friends: UserConnection
  searchFriends(searchTerm: String): [User!]
}

type UserFriendship implements Node & Timestamps {
  id: ID!
  user: User!
  friend: User!
  status: InvitationStatus!
  createdAt: DateTime
  updatedAt: DateTime
}

input UserUpdateInput {
  id: ID!
  firstName: String
  lastName: String
  handle: String
  email: String
}

type ValidEmailResponse {
  alreadyTaken: Boolean!
}

type UserEdge {
  cursor: String!
  node: User!
}

type UserConnection {
  edges: [UserEdge!]
  pageInfo: PageInfo!
}

type UserFriendshipEdge {
  cursor: String!
  node: UserFriendship!
}

type UserFriendshipConnection {
  edges: [UserFriendshipEdge!]!
  pageInfo: PageInfo!
}

type Query {
  "All users"
  users: [User!]
  "Validate if an email is already taken"
  userValidateEmail(email: String!): ValidEmailResponse!
  "Search for users by name"
  userSearch(searchTerm: String): [User!]
  "Fetch the user profile of any user by ID"
  userProfile(id: ID!): User
}

type Mutation {
  "Update a user"
  userUpdate(userUpdateInput: UserUpdateInput!): User!
  "Request a friendship"
  userRequestFriendship(friendId: ID!): UserFriendship!
  "Accept a friendship"
  userAcceptFriendship(friendId: ID!): UserFriendship!
  # removeUser(id: Int!): User
}
