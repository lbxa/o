schema {
  query: Query
  mutation: Mutation
}

type AuthCreateNewTokensResponse {
  accessToken: String!
  refreshToken: String!
}

input AuthCreateUserInput {
  email: String!
  firstName: String!
  lastName: String!
  password: String!
}

type AuthCreateUserResponse {
  accessToken: String!
  refreshToken: String!
  user: User!
}

input AuthLoginInput {
  email: String!
  password: String!
}

type AuthLoginResponse {
  accessToken: String!
  refreshToken: String!
  user: User!
}

type Community implements Node {
  id: ID!
  isPublic: Boolean!
  name: String!
  users: [User]
}

input CommunityCreateInput {
  isPublic: Boolean!
  name: String!
}

input CommunityUpdateInput {
  id: ID!
  name: String
}

type Mutation {
  authCreateNewTokens: AuthCreateNewTokensResponse!
  authCreateUser(authCreateUserInput: AuthCreateUserInput!): AuthCreateUserResponse!
  authLogin(authLoginInput: AuthLoginInput!): AuthLoginResponse!
  authLogout(id: Int!): Boolean!
  communityCreate(communityCreateInput: CommunityCreateInput!): Community!
  communityDelete(id: ID!): Community
  communityInvite(communityId: ID!, userId: ID!): Community!
  communityJoin(communityId: ID!, userId: ID!): Community!
  communityLeave(communityId: ID!, userId: ID!): Community!
  communityUpdate(communityUpdateInput: CommunityUpdateInput!): Community!
  userUpdate(userUpdateInput: UserUpdateInput!): User!
}

interface Node {
  id: ID!
}

type Query {
  activeUser: User
  communities: [Community!]
  community(id: ID!): Community
  health: String!
  node(id: ID!): Node
  user(id: ID!): User
  userValidateEmail(email: String!): ValidEmailResponse
}

type User implements Node {
  email: String
  firstName: String
  handle: String
  id: ID!
  lastName: String
  password: String
}

input UserUpdateInput {
  email: String
  firstName: String
  handle: String
  id: ID!
  lastName: String
}

type ValidEmailResponse {
  alreadyTaken: Boolean!
}