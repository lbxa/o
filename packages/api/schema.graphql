schema {
  query: Query
  mutation: Mutation
}

type AuthCreateNewTokensResponse {
  accessToken: String!
  refreshToken: String!
}

input AuthCreateUserInput {
  email: String!
  firstName: String!
  lastName: String!
  password: String!
}

type AuthCreateUserResponse {
  accessToken: String!
  refreshToken: String!
  user: User!
}

input AuthLoginInput {
  email: String!
  password: String!
}

type AuthLoginResponse {
  accessToken: String!
  refreshToken: String!
  user: User!
}

type Mutation {
  authCreateNewTokens: AuthCreateNewTokensResponse!
  authCreateUser(authCreateUserInput: AuthCreateUserInput!): AuthCreateUserResponse!
  authLogin(authLoginInput: AuthLoginInput!): AuthLoginResponse!
  authLogout(id: Int!): Boolean!
  userUpdate(userUpdateInput: UserUpdateInput!): User!
}

type Post {
  content: String!
  id: Int!
}

type Query {
  health: String!
  user(id: Int!): User
  userValidateEmail(email: String!): ValidEmailResponse
}

type User {
  email: String
  firstName: String
  handle: String
  id: Int
  lastName: String
  password: String
}

input UserUpdateInput {
  email: String
  firstName: String
  handle: String
  id: Int!
  lastName: String
}

type ValidEmailResponse {
  alreadyTaken: Boolean!
}