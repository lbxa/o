schema {
  query: Query
  mutation: Mutation
}

input AuthCreateUserInput {
  email: String!
  firstName: String!
  lastName: String!
  password: String!
}

type AuthCreateUserResponse {
  accessToken: String!
  refreshToken: String!
  user: User!
}

input AuthLoginInput {
  email: String!
  password: String!
}

type AuthLoginResponse {
  accessToken: String!
  refreshToken: String!
  user: User!
}

type Challenge implements Node & Timestampable {
  community: Community
  createdAt: DateTime
  description: String
  endDate: DateTime
  id: ID!
  invitations: [ChallengeInvitation!]
  members: [User!]
  memberships: [ChallengeMembership!]
  name: String!
  startDate: DateTime
  updatedAt: DateTime
}

input ChallengeCreateInput {
  communityId: ID!
  description: String!
  endDate: DateTime!
  name: String!
  startDate: DateTime!
}

type ChallengeInvitation implements Node & Timestampable {
  challenge: Challenge!
  createdAt: DateTime
  expiresAt: DateTime!
  id: ID!
  invitee: User!
  inviter: User!
  status: InvitationStatus!
  updatedAt: DateTime
}

type ChallengeMembership implements Node {
  challenge: Challenge!
  community: Community!
  id: ID!
  joinedAt: DateTime!
  user: User!
}

input ChallengeUpdateInput {
  description: String
  endDate: DateTime
  id: ID!
  name: String
  startDate: DateTime
}

type Community implements Node & Timestampable {
  challenges: [Challenge!]
  createdAt: DateTime
  id: ID!
  invitations: [CommunityInvitation!]
  isPublic: Boolean
  isVerified: Boolean
  members: [User!]
  memberships: [CommunityMembership!]
  name: String!
  updatedAt: DateTime
  users: [User]
}

input CommunityCreateInput {
  isPublic: Boolean!
  name: String!
}

type CommunityInvitation implements Node & Timestampable {
  community: Community!
  createdAt: DateTime!
  expiresAt: DateTime!
  id: ID!
  invitee: User!
  inviter: User!
  status: InvitationStatus!
  updatedAt: DateTime
}

type CommunityMembership implements Node {
  community: Community!
  id: ID!
  isAdmin: Boolean!
  joinedAt: DateTime!
  user: User!
}

input CommunityUpdateInput {
  id: ID!
  name: String
}

"""Date custom scalar type"""
scalar DateTime

enum InvitationStatus {
  ACCEPTED
  DECLINED
  PENDING
}

type Mutation {
  authCreateUser(authCreateUserInput: AuthCreateUserInput!): AuthCreateUserResponse!
  authLogin(authLoginInput: AuthLoginInput!): AuthLoginResponse!
  authLogout(id: Int!): Boolean!
  authRefreshTokens: Tokens!
  challengeCreate(challengeCreateInput: ChallengeCreateInput!): Challenge!
  challengeDelete(id: ID!): Boolean!
  challengeInvite(challengeId: ID!, userId: ID!): Boolean!
  challengeJoin(inviteId: ID!): Challenge!
  challengeLeave(id: ID!): Boolean!
  challengeUpdate(challengeUpdateInput: ChallengeUpdateInput!): Challenge!
  communityCreate(communityCreateInput: CommunityCreateInput!): Community!
  communityDelete(id: ID!): Boolean!
  communityInvite(communityId: ID!, userId: ID!): Boolean!
  communityJoin(inviteId: Int!): Community!
  communityLeave(id: ID!): Boolean!
  communityUpdate(communityUpdateInput: CommunityUpdateInput!): Community!
  userUpdate(userUpdateInput: UserUpdateInput!): User!
}

interface Node {
  id: ID!
}

type Query {
  challenge(id: ID!): Challenge
  challengeInvitations(userId: ID!): [ChallengeInvitation!]
  challenges: [Challenge!]
  communities: [Community!]
  community(id: ID!): Community
  communityChallenges(communityId: ID!): [Challenge!]
  communityInvitations(userId: ID!): [Community!]
  health: String!
  node(id: ID!): Node
  userChallenges(userId: ID!): [Challenge!]
  userCommunities(userId: ID!): [Community!]
  userSearch(searchTerm: String): [User!]
  userValidateEmail(email: String!): ValidEmailResponse
  users: [User!]
  viewer: Viewer
}

interface Timestampable {
  createdAt: DateTime
  updatedAt: DateTime
}

type Tokens {
  accessToken: String!
  refreshToken: String!
}

type User implements Node & Timestampable {
  communities: [Community!]
  createdAt: DateTime
  email: String
  firstName: String
  friends: [User!]
  handle: String
  id: ID!
  lastName: String
  memberships: [CommunityMembership!]
  password: String
  receivedInvitations: [CommunityInvitation!]
  searchFriends(searchTerm: String): [User!]
  sentInvitations: [CommunityInvitation!]
  updatedAt: DateTime
}

input UserUpdateInput {
  email: String
  firstName: String
  handle: String
  id: ID!
  lastName: String
}

type ValidEmailResponse {
  alreadyTaken: Boolean!
}

type Viewer {
  challenges(communityId: ID!): [Challenge!]
  communities: [Community!]
  user: User
}